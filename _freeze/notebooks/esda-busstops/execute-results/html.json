{
  "hash": "f5c8ba3308894074f3a018347c7d3256",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"ESDA Bus Stops\"\nauthor: \"Goh Si hui\"\ndate: \"Oct 12 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  warning: false\n  freeze: true\n  code-line-numbers: true\n---\n\n\n\n\n\n# Intent of this notebook \n\nApply appropriate spatial statistical methods to \n- discover if bus stops are even distributed geographically. \n- find out if there are any sign of spatial clusterings, and if yes, where are these clusters. \n\n# Setting up the environment \n\n## Packages \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n```\n:::\n\n\n\n\n\n\n## Import data \n\n### bus stop locations \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nbusstops<- st_read(dsn = \"data/spatial\",\n                   layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `BusStop' from data source \n  `C:\\sihuihui\\mitbcapstone\\notebooks\\data\\spatial' using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nglimpse(busstops)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,166\nColumns: 4\n$ BUS_STOP_N <chr> \"65059\", \"16171\", \"61101\", \"01239\", \"17269\", \"11291\", \"1153…\n$ BUS_ROOF_N <chr> \"B12\", \"B06\", \"NIL\", \"B01\", \"B01\", \"B17\", \"B12\", \"B05\", \"B0…\n$ LOC_DESC   <chr> \"ST ANNE'S CH\", \"YUSOF ISHAK HSE\", \"BLK 120\", \"SULTAN PLAZA…\n$ geometry   <POINT [m]> POINT (35565.66 41659.52), POINT (21439.91 31253.63),…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Hexagon layer \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nmpsz <-st_read(dsn = \"data/spatial\",\n               layer = \"MPSZ-2019\") %>% \n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\sihuihui\\mitbcapstone\\notebooks\\data\\spatial' using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n\n\nhexagon grid with 400m from 1 edge to the opposite\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhex_layer <-\n  st_make_grid(mpsz,\n               cellsize = 400,\n               what = \"polygon\",\n               square = FALSE) %>%\n  st_sf()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntm_shape(hex_layer) +\n  tm_fill(col = \"white\", title = \"Hexagons\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Singapore with hexagon grid\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.005, title = \"Bus Stops\")\n```\n\n::: {.cell-output-display}\n![](esda-busstops_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhex_layer$n_busstops = lengths(st_intersects(hex_layer, busstops))\nhex_layer <- filter(hex_layer, n_busstops > 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntm_shape(mpsz) +\n  tm_fill(\"green\", title = \"Singapore Boundary\", alpha = 0.5) +\n  tm_shape(hex_layer) +\n  tm_fill(col = \"white\", title = \"Hexagons\", alpha = 1) +\n  tm_borders(alpha = 0.2) +\n  tm_layout(main.title = \"Hexagon grid corresponding to Singapore bus stops\",\n            main.title.position = \"center\",\n            main.title.size = 1.0,\n            legend.height = 0.35, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2, bg.color = \"white\", bg.alpha = 0.5) +\n  tm_scale_bar(bg.color = \"white\", bg.alpha = 0.5) +\n  tm_shape(busstops) +\n  tm_dots(col = \"red\", size = 0.001, title = \"Bus Stops\") +\n  tm_grid(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](esda-busstops_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nassign ids to hexagon cell \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhead(hex_layer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 27988.55 xmax: 5067.538 ymax: 31568.12\nProjected CRS: SVY21 / Singapore TM\n                        geometry n_busstops\n1 POLYGON ((3867.538 27988.55...          1\n2 POLYGON ((4467.538 28334.96...          1\n3 POLYGON ((4467.538 30413.42...          1\n4 POLYGON ((4467.538 31106.24...          1\n5 POLYGON ((4667.538 30067.01...          2\n6 POLYGON ((4867.538 28334.96...          1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nhex_layer$hex_id <- sprintf(\"H%04d\", seq_len(nrow(hex_layer))) %>% as.factor()\nhead(hex_layer)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 2 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3667.538 ymin: 27988.55 xmax: 5067.538 ymax: 31568.12\nProjected CRS: SVY21 / Singapore TM\n                        geometry n_busstops hex_id\n1 POLYGON ((3867.538 27988.55...          1  H0001\n2 POLYGON ((4467.538 28334.96...          1  H0002\n3 POLYGON ((4467.538 30413.42...          1  H0003\n4 POLYGON ((4467.538 31106.24...          1  H0004\n5 POLYGON ((4667.538 30067.01...          2  H0005\n6 POLYGON ((4867.538 28334.96...          1  H0006\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### passenger trips \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\napr_od<- read_csv(\"data/aspatial/origin_destination_bus_202404.csv\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRows: 5667461 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): YEAR_MONTH, DAY_TYPE, PT_TYPE, ORIGIN_PT_CODE, DESTINATION_PT_CODE\ndbl (2): TIME_PER_HOUR, TOTAL_TRIPS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nglimpse(apr_od)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,667,461\nColumns: 7\n$ YEAR_MONTH          <chr> \"2024-04\", \"2024-04\", \"2024-04\", \"2024-04\", \"2024-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <dbl> 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 20,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <chr> \"04168\", \"04168\", \"80119\", \"80119\", \"44069\", \"4406…\n$ DESTINATION_PT_CODE <chr> \"10051\", \"10051\", \"90079\", \"90079\", \"17229\", \"1722…\n$ TOTAL_TRIPS         <dbl> 2, 9, 6, 8, 1, 2, 17, 2, 6, 2, 5, 3, 7, 1, 5, 2, 1…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Data Wrangling of Aspatial Data \n\nNeed to process the od trips data \n\n## data type \nconvert from character to factor data type. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\napr_od$ORIGIN_PT_CODE <- as.factor(apr_od$ORIGIN_PT_CODE)\napr_od$DESTINATION_PT_CODE <- as.factor(apr_od$DESTINATION_PT_CODE)\n```\n:::\n\n\n\n\n\nCheck the data again \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nglimpse(apr_od)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,667,461\nColumns: 7\n$ YEAR_MONTH          <chr> \"2024-04\", \"2024-04\", \"2024-04\", \"2024-04\", \"2024-…\n$ DAY_TYPE            <chr> \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       <dbl> 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 20,…\n$ PT_TYPE             <chr> \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      <fct> 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE <fct> 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         <dbl> 2, 9, 6, 8, 1, 2, 17, 2, 6, 2, 5, 3, 7, 1, 5, 2, 1…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## other data checks \n\n::: {.panel-tabset}\n\n## YEAR_MONTH\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nunique(apr_od$YEAR_MONTH)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-04\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## DAY_TYPE\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nunique(apr_od$DAY_TYPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"WEEKENDS/HOLIDAY\" \"WEEKDAY\"         \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## TIME_PER_HOUR\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nunique(apr_od$TIME_PER_HOUR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 16 14 17  7 10 20 19  5  9 22 11 21 18  6 12 15  8 23 13  0  1  2  3  4\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlength(unique(apr_od$TIME_PER_HOUR))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## PT_TYPE\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nunique(apr_od$PT_TYPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"BUS\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## ORIGIN_PT_CODE \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlength(unique(apr_od$ORIGIN_PT_CODE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5104\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## DESTINATION_PT_CODE\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nlength(unique(apr_od$DESTINATION_PT_CODE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5106\n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\n## check for duplicates \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nduplicate <- apr_od %>%\n  group_by_all() %>%\n  filter(n()>1) %>%\n  ungroup()\n\nduplicate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 7\n# ℹ 7 variables: YEAR_MONTH <chr>, DAY_TYPE <chr>, TIME_PER_HOUR <dbl>,\n#   PT_TYPE <chr>, ORIGIN_PT_CODE <fct>, DESTINATION_PT_CODE <fct>,\n#   TOTAL_TRIPS <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n## check for missing values and 0 values \n\n\n::: {.panel-tabset}\n## Missing values \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\napr_od %>% \n  map(is.na) %>%\n  map(sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$YEAR_MONTH\n[1] 0\n\n$DAY_TYPE\n[1] 0\n\n$TIME_PER_HOUR\n[1] 0\n\n$PT_TYPE\n[1] 0\n\n$ORIGIN_PT_CODE\n[1] 0\n\n$DESTINATION_PT_CODE\n[1] 0\n\n$TOTAL_TRIPS\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n\n## 0 Values \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nsummary(apr_od$TOTAL_TRIPS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n    1.00     2.00     4.00    20.41    12.00 30786.00 \n```\n\n\n:::\n:::\n\n\n\n\n\n:::\n\nFrom the above output, we know that there are no missing values and no observations with 0 trips.\n\n## Visualising the data \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntotal_trips <- apr_od %>% \n  group_by(DAY_TYPE) %>%\n  summarise(TOTAL = sum(TOTAL_TRIPS))\n  \ng_total_trips <- ggplot(total_trips) + \n  geom_col(aes(x=DAY_TYPE, y=TOTAL)) + \n  ggtitle('Total Passenger Trips in Apr 2024') \n\ng_total_trips\n```\n\n::: {.cell-output-display}\n![](esda-busstops_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nweekday_trips <- apr_od %>% \n  filter(DAY_TYPE == \"WEEKDAY\") %>%\n  group_by(TIME_PER_HOUR) %>%\n  summarise(TOTAL = sum(TOTAL_TRIPS)) \n  \ng_weekday_trips <- ggplot(weekday_trips) + \n  geom_col(aes(x=TIME_PER_HOUR, y=TOTAL)) + \n  ggtitle('Weekday Passenger Trips')\n\nweekend_trips <- apr_od %>% \n  filter(DAY_TYPE == \"WEEKENDS/HOLIDAY\") %>%\n  group_by(TIME_PER_HOUR) %>%\n  summarise(TOTAL = sum(TOTAL_TRIPS))\n  \ng_weekend_trips <- ggplot(weekend_trips) + \n  geom_col(aes(x=TIME_PER_HOUR, y=TOTAL)) + \n  ggtitle('Weekend Passenger Trips')\n\ng_weekday_trips  \n```\n\n::: {.cell-output-display}\n![](esda-busstops_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code .hidden}\ng_weekend_trips\n```\n\n::: {.cell-output-display}\n![](esda-busstops_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\napr_trips <- apr_od %>%\n  select(c(ORIGIN_PT_CODE, DAY_TYPE, TIME_PER_HOUR, TOTAL_TRIPS)) %>%\n  rename(BUS_STOP_N = ORIGIN_PT_CODE) \n\n(head(apr_trips))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  BUS_STOP_N DAY_TYPE         TIME_PER_HOUR TOTAL_TRIPS\n  <fct>      <chr>                    <dbl>       <dbl>\n1 04168      WEEKENDS/HOLIDAY            16           2\n2 04168      WEEKDAY                     16           9\n3 80119      WEEKENDS/HOLIDAY            14           6\n4 80119      WEEKDAY                     14           8\n5 44069      WEEKDAY                     17           1\n6 44069      WEEKENDS/HOLIDAY            17           2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Mapping bus stops to hexagon layer \n\nhex layer only tell us the number of bus stops in each cell \nneed to associate the bus stop codes with bus stop locations. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nbs_hex <- st_intersection(busstops, hex_layer) %>%\n  st_drop_geometry() %>%\n  select(c(BUS_STOP_N, hex_id))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nhead(bs_hex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     BUS_STOP_N hex_id\n3199      25059  H0001\n2527      25751  H0002\n247       26379  H0003\n2340      26369  H0004\n2743      25719  H0005\n3547      26389  H0005\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nbs_hex$BUS_STOP_N <- as.factor(bs_hex$BUS_STOP_N )\n```\n:::\n\n\n\n\n\n\n## Number of trips per hexagon cell \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntrips <- inner_join(apr_trips, bs_hex)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nJoining with `by = join_by(BUS_STOP_N)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in inner_join(apr_trips, bs_hex): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 285 of `x` matches multiple rows in `y`.\nℹ Row 3125 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nhead(trips)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  BUS_STOP_N DAY_TYPE         TIME_PER_HOUR TOTAL_TRIPS hex_id\n  <fct>      <chr>                    <dbl>       <dbl> <fct> \n1 04168      WEEKENDS/HOLIDAY            16           2 H1257 \n2 04168      WEEKDAY                     16           9 H1257 \n3 80119      WEEKENDS/HOLIDAY            14           6 H1447 \n4 80119      WEEKDAY                     14           8 H1447 \n5 44069      WEEKDAY                     17           1 H0522 \n6 44069      WEEKENDS/HOLIDAY            17           2 H0522 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ntrips <- trips %>%\n  group_by(\n    hex_id,\n    DAY_TYPE,\n    TIME_PER_HOUR) %>%\n  summarise(TOTAL_TRIPS = sum(TOTAL_TRIPS))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'hex_id', 'DAY_TYPE'. You can override\nusing the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nhead(trips)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n# Groups:   hex_id, DAY_TYPE [1]\n  hex_id DAY_TYPE TIME_PER_HOUR TOTAL_TRIPS\n  <fct>  <chr>            <dbl>       <dbl>\n1 H0001  WEEKDAY              6          15\n2 H0001  WEEKDAY              7          45\n3 H0001  WEEKDAY              8          14\n4 H0001  WEEKDAY              9          14\n5 H0001  WEEKDAY             10           6\n6 H0001  WEEKDAY             11          10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n# GeoVisualisation and Analysis \n\n## Number of trips by Peak Hour\n\nPeak Hour Periods:\n\n- Weekday Morning Peak - 9am to 9am\n\n- Weekday Afternoon Peak - 5pm to 8pm\n\n- Weekend/holiday Morning Peak - 11am to 2pm\n\n- Weekend/holiday Evening Peak - 4pm to 7pm\n\n\n\n\n# Local Indicators of Spatial Association (LISA) Analysis \n\n# Emerging Hot Spot Analysis \n\n## time series cube\n\n",
    "supporting": [
      "esda-busstops_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}