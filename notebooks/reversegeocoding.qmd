---
title: "Reverse Geocoding Residential Information"
author: "Goh Si Hui"
date: "Oct 26 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  warning: false
  freeze: true
---

```{r}
pacman::p_load(tidyverse, sf, httr, jsonlite, rvest)
```

```{r}
HDB <- read_csv("data/aspatial/HDBPropertyInformation.csv")
```

```{r}
glimpse(HDB)
```

```{r}

HDB_tidy <- HDB %>%
  mutate(address = paste(blk_no,street)) 

```

```{r}
glimpse(HDB_tidy)
```

```{r}
add_list <- sort(unique(HDB_tidy$address))
```

```{r}
get_coords <- function(add_list){
  
  # Create a data frame to store all retrieved coordinates
  postal_coords <- data.frame()
    
  for (i in add_list){
    #print(i)

    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',
           query=list(searchVal=i,
                     returnGeom='Y',
                     getAddrDetails='Y'))
    data <- fromJSON(rawToChar(r$content))
    found <- data$found
    res <- data$results
    
    # Create a new data frame for each address
    new_row <- data.frame()
    
    # If single result, append 
    if (found == 1){
      postal <- res$POSTAL 
      lat <- res$LATITUDE
      lng <- res$LONGITUDE
      new_row <- data.frame(address= i, 
                            postal = postal, 
                            latitude = lat, 
                            longitude = lng)
    }
    
    # If multiple results, drop NIL and append top 1
    else if (found > 1){
      # Remove those with NIL as postal
      res_sub <- res[res$POSTAL != "NIL", ]
      
      # Set as NA first if no Postal
      if (nrow(res_sub) == 0) {
          new_row <- data.frame(address= i, 
                                postal = NA, 
                                latitude = NA, 
                                longitude = NA)
      }
      
      else{
        top1 <- head(res_sub, n = 1)
        postal <- top1$POSTAL 
        lat <- top1$LATITUDE
        lng <- top1$LONGITUDE
        new_row <- data.frame(address= i, 
                              postal = postal, 
                              latitude = lat, 
                              longitude = lng)
      }
    }

    else {
      new_row <- data.frame(address= i, 
                            postal = NA, 
                            latitude = NA, 
                            longitude = NA)
    }
    
    # Add the row
    postal_coords <- rbind(postal_coords, new_row)
  }
  return(postal_coords)
}
```

```{r}
coords <- get_coords(add_list)
```

```{r}
write_rds(coords, "data/coords.rds")
```

```{r}
hdb_coords <- left_join(HDB_tidy, coords, by = join_by('address'))

```


```{r}
glimpse(hdb_coords)
```

We will use the total_dwelling_units to estimate the population size 

```{r}

hdb_coords_tidy <- hdb_coords %>%
  filter(residential == "Y" &
           total_dwelling_units > 0) %>%
  select(address, total_dwelling_units, postal, latitude, longitude)

glimpse(hdb_coords_tidy)
```

```{r}

write_rds(hdb_coords_tidy, "data/aspatial/res_coords.rds")
```
