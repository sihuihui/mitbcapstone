---
title: "Exploring the Data - Origin Bus Stop - Destination Bus Stop Flows"
author: "Goh Si Hui"
date: "Sep 8 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  warning: false
  freeze: true
---

# Getting Started 

## Downloading the packages 

```{r}
pacman::p_load(tmap, sf, DT, stplanr, tidyverse)
```

# Importing the Data 

## Passenger Volume by Origin Destination Bus Stops 

::: {.panel-tabset}

## Apr 2024  

```{r}
odbus_apr <- read_csv("data/aspatial/origin_destination_bus_202404.csv")
```

## May 2024 

```{r}
odbus_may <- read_csv("data/aspatial/origin_destination_bus_202405.csv")
```

## Jun 2024

```{r}
odbus_jun <- read_csv("data/aspatial/origin_destination_bus_202406.csv")
```
::: 

Checking the data 

::: {.panel-tabset}
## Apr 2024 

```{r}
glimpse(odbus_apr)
```
## May 2024
```{r}
glimpse(odbus_may)
```

## Jun 2024
```{r}
glimpse(odbus_jun)
```
::::


Convert the origin and destination codes into factors 

::: {.panel-tabset}

## Apr 2024  

```{r}
odbus_apr$ORIGIN_PT_CODE <- as.factor(odbus_apr$ORIGIN_PT_CODE)

odbus_apr$DESTINATION_PT_CODE <- as.factor(odbus_apr$DESTINATION_PT_CODE)

glimpse(odbus_apr)
```

## May 2024
```{r}
odbus_may$ORIGIN_PT_CODE <- as.factor(odbus_may$ORIGIN_PT_CODE)

odbus_may$DESTINATION_PT_CODE <- as.factor(odbus_may$DESTINATION_PT_CODE)

glimpse(odbus_may)
```
## Jun 2024
```{r}
odbus_jun$ORIGIN_PT_CODE <- as.factor(odbus_jun$ORIGIN_PT_CODE)

odbus_jun$DESTINATION_PT_CODE <- as.factor(odbus_jun$DESTINATION_PT_CODE)

glimpse(odbus_jun)
```
:::


## Geospatial Data 

```{r}
busstop <- st_read(dsn = "data/spatial",
                   layer = "BusStop")

glimpse(busstop)
```

```{r}
busstop <- st_transform(busstop, crs = 3414)
glimpse(busstop)

```
```{r}
busstop$BUS_STOP_N <- as.factor(busstop$BUS_STOP_N)
busstop

```

```{r}
busstop <- write_rds(busstop, "data/rds/busstop.rds")
```

Importing the planning subzone data 
```{r}

mpsz <- st_read(dsn = "data/spatial",
                layer = "MPSZ-2019") 

```
transform mpsz from WGS 84 to CRS SVY21

```{r}
mpsz <- st_transform(mpsz, crs = 3414)
mpsz
```

```{r}
mpsz <- write_rds(mpsz, "data/rds/mpsz.rds")

```


# Geospatial Data Wrangling 

combine busstop and mpsz to find out which subzone each bus stop is located in 

```{r}

busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_N, SUBZONE_C) %>%
  st_drop_geometry()
```


```{r}

datatable(busstop_mpsz)
```

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```


```{r}

odbus_apr_6_9 <- odbus_apr %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

```

```{r}

odbus_may_6_9 <- odbus_may %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

```

```{r}

odbus_jun_6_9 <- odbus_jun %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

```


```{r}
od_apr <- left_join(odbus_apr_6_9, busstop_mpsz,
                    by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         ORIGIN_SZ_NAME = SUBZONE_N, 
         DESTIN_BS = DESTINATION_PT_CODE)

```
```{r}
duplicate <- od_apr %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

```

```{r}

od_apr <- unique(od_apr)

```

```{r}
duplicate <- od_apr %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

```

```{r}
od_apr <- left_join(od_apr , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 

```

```{r}
duplicate <- od_apr %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

```

```{r}

od_apr <- unique(od_apr)

```

```{r}
duplicate <- od_apr %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

```


```{r}

od_apr <- od_apr %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

```{r}
write_rds(od_apr, "data/rds/od_apr_fij.rds")
```


# Visualising Spatial Interaction 
## Remove intra-zonal flows 

```{r}
od_apr_fij <- od_apr[od_apr$ORIGIN_SZ!=od_apr$DESTIN_SZ,]

```


```{r}

flowline_apr<- od2line(flow = od_apr_fij, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")

```

```{r}

tm_shape(mpsz) +
  tm_polygons() +
flowline_apr%>%  
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)

```

```{r}

tm_shape(mpsz) +
  tm_polygons() +
flowline_apr %>%
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)

```

```{r}

tm_shape(mpsz) +
  tm_polygons() +
flowline_apr %>%
  filter(MORNING_PEAK >= 10000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)

```