---
title: "Exploring the Data - Spatial Point Analysis of Bus Stop Locations"
author: "Goh Si Hui"
date: "Sep 15 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  warning: false
  freeze: true
---

# Getting Started 
## Installing and Loading the R packages 
```{r}

pacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools)
```

## Data 

### Bus stop locations (Points)

```{r}

busstop_sf <- st_read(dsn = "data/spatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)

```
### Map of Singapore (Polygon) 
```{r}
sg_sf <- st_read("data/spatial/NationalMapPolygon.kml")%>%
  st_transform(crs = 3414)

```
```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(sg_sf) + 
  tm_polygons() 
```
### Singapore Master Plan Subzone 2019 
```{r}
mpsz_sf <- st_read(dsn = "data/spatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)


```
```{r}
tmap_options(check.and.fix = TRUE)
qtm(mpsz_sf)
```

```{r}
sg_sf <- mpsz_sf %>%
  st_union()

```

```{r}
qtm(sg_sf)

```


```{r}

tm_shape(mpsz_sf) + 
  tm_polygons() +
  tm_shape(busstop_sf) + 
  tm_dots()

```


```{r}
tmap_mode("view")
tm_shape(busstop_sf) + 
  tm_dots() 
tmap_mode("plot")

```

#Geospatial Data Wrangling 

## Converting sf format to ppp format 
```{r}

busstop_ppp <- as.ppp(busstop_sf)
plot(busstop_ppp)
```


```{r}
summary(busstop_ppp)


```

## Removing Duplicated Points 

```{r}
any(duplicated(busstop_ppp))

```

```{r}
multiplicity(busstop_ppp)

```

```{r}
sum(multiplicity(busstop_ppp) > 1)

```

```{r}
busstop_ppp_jit <- rjitter(busstop_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)

```

```{r}
any(duplicated(busstop_ppp_jit))

```


## Creating owin object

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
```

```{r}
summary(sg_owin)
```


## Combining point event objects and owin object

```{r}
busstopSG_ppp <- busstop_ppp[sg_owin]

```

```{r}
summary(busstopSG_ppp)

```

```{r}
plot(busstopSG_ppp)
```

rescale from metres to kilometres
```{r}
busstopSG_ppp.km <- rescale.ppp(busstopSG_ppp, 
                                  1000, 
                                  "km")

```

```{r}
plot(busstopSG_ppp.km)
```

# First-order Spatial Point Pattern Analysis 

## Kernel Density Estimation 
we will compute the kernel density estimation (KDE) of bus stops in Singapore

### Computing KDE using Automatic Bandwidth Selection Method 

```{r}
kde_busstopSG_bw <- density(busstopSG_ppp.km,
                            sigma=bw.diggle,
                            edge=TRUE,
                            kernel = "gaussian")

```


```{r}
plot(kde_busstopSG_bw, main = "Fixed Bandwith Method")

```

To retrieve the bandwidth used to compute the kde layer: 

```{r}
bw <- bw.diggle(busstopSG_ppp.km)
bw
```
### Working with different automatic bandwidth methods 

```{r}

bw.CvL(busstopSG_ppp.km)
```
```{r}
bw.scott(busstopSG_ppp.km)

```
```{r}
bw.ppl(busstopSG_ppp.km)
```
```{r}
kde_busstopSG_ppl <- density(busstopSG_ppp.km,
                             sigma=bw.ppl,
                             edge=TRUE,
                             kernel = "gaussian")

par(mfrow = c(1,2))
plot(kde_busstopSG_bw, main = "bw.diggle")
plot(kde_busstopSG_ppl, main = "bw.ppl")


```
### Working with different kernel methods 

```{r}
par(mfrow=c(2,2))

plot(density(busstopSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel = "gaussian"),
     main="Gaussian")

plot(density(busstopSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel = "epanechnikov"),
     main="Epanechnikov")

plot(density(busstopSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel = "quartic"),
     main="Quartic")
plot(density(busstopSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel = "disc"),
     main="Disc")

```

# Fixed and Adaptive KDE

## Computing KDE using fixed bandwith 

define a bandwidth of 600 metre. 

```{r}
kde_busstopSG_600 <- density(busstopSG_ppp.km,
                             sigma = 0.6,
                             edge = TRUE, 
                             kernel = "gaussian")
plot(kde_busstopSG_600)
```
## Computing KDE with adaptive bandwidth 

```{r}
kde_busstopSG_adaptive <- adaptive.density(
  busstopSG_ppp.km, 
  method="kernel")

plot(kde_busstopSG_adaptive)
```


Comparing the fixed and adaptive kernel density estimation outputs 

```{r}
par(mfrow=c(1,2))
plot(kde_busstopSG_adaptive, main = "Adaptive Bandwidth")
plot(kde_busstopSG_bw, main = "Fixed Bandwith")
```

## Converting KDE Output into grid object 

Purpose: to make the KDE output suitable for mapping purposes

```{r}
gridded_kde_busstopSG_bw <- as.SpatialGridDataFrame.im(kde_busstopSG_bw)
spplot(gridded_kde_busstopSG_bw)

```

### Converting gridded output into raster 

```{r}
kde_busstopSG_raster <- raster(kde_busstopSG_bw)
kde_busstopSG_raster
```
### Assigning Projection Systems

```{r}
projection(kde_busstopSG_raster) <-CRS("+init=EPSG:3414")
kde_busstopSG_raster

```

### Visualising the output in tmap

```{r}
tm_shape(kde_busstopSG_raster) +
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)

```
## Comparing Spatial Point Patterns using KDE

### Extracting Study Area 

```{r}
je <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG EAST")

cck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")

wd <- mpsz_sf %>%
  filter(PLN_AREA_N == "WOODLANDS")

sk <- mpsz_sf %>%
  filter(PLN_AREA_N == "SENGKANG")
```

```{r}

par(mfrow=c(2,2))
plot(je, main = "Jurong East")

```

### Creating owin object

```{r}
je_owin = as.owin(je)
cck_owin = as.owin(cck)
wd_owin = as.owin(wd)
sk_owin = as.owin(sk)

```

### Combine busstop points and study area 

